package router

import (
	"log"
	"memorize/config"
	"memorize/internal/handler"
	authHandler "memorize/internal/handler/authentication"
	userHandler "memorize/internal/handler/authentication/user"
	questionHandler "memorize/internal/handler/question"
	"memorize/internal/middleware"
	"memorize/internal/model"
	"memorize/internal/repository"
	"memorize/internal/service/authentication"
	userService "memorize/internal/service/authentication/user"
	"memorize/internal/service/box"
	questionService "memorize/internal/service/question"
	"memorize/pkg/database"
	"memorize/pkg/security/jwt"
	"memorize/pkg/validator"

	_ "memorize/docs" // docs is generated by Swag CLI, you have to import it.

	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
	"go.uber.org/fx"
)

func NewRouter(userHandler *userHandler.UserHandler,
	authHandler *authHandler.AuthHandler,
	authMiddleware *middleware.AuthMiddleware,
	questionHandler *questionHandler.QuestionHandler,
	boxHandler *handler.BoxHandler,
) *gin.Engine {
	router := gin.Default()

	unAuthorizedRoutes := router.Group("")
	_ = authHandler.SetRoutes(unAuthorizedRoutes)

	authorizedRoutes := router.Group("")
	authorizedRoutes.Use(authMiddleware.Handle())
	{
		adminAuthorizedRoutes := authorizedRoutes.Group("/admin")
		{
			_ = userHandler.SetRoutes(adminAuthorizedRoutes)
			_ = questionHandler.SetRoutes(adminAuthorizedRoutes)
		}

		boxHandler.SetRoutes(authorizedRoutes)
	}

	// Swagger endpoint with custom configuration
	router.GET("/swagger/*any",
		ginSwagger.WrapHandler(swaggerFiles.Handler,
			ginSwagger.DefaultModelsExpandDepth(-1),
			ginSwagger.DocExpansion("none")))

	return router
}

var Module = fx.Options(
	fx.Provide(
		config.NewConfig,
		NewRouter,
		jwt.NewJwt,
		middleware.NewAuthMiddleware,

		model.NewListOfDbModels,
		database.NewDatabase,
		validator.NewValidator,

		repository.NewRepository[model.User],
		userService.NewUserService,
		userHandler.NewUserHandler,

		authentication.NewAuthService,
		authHandler.NewAuthHandler,

		repository.NewRepository[model.Question],
		questionService.NewQuestionService,
		questionHandler.NewQuestionHandler,

		repository.NewRepository[model.QuestionUser],
		box.NewBoxService,
		handler.NewBoxHandler,
	),
	fx.Invoke(runGinServer),
)

func runGinServer(router *gin.Engine) {
	if err := router.Run(":8000"); err != nil {
		log.Fatal(err)
	}
}
