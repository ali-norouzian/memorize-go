package router

import (
	"log"
	"memorize/config"
	authHandler "memorize/internal/handler/authentication"
	userHandler "memorize/internal/handler/authentication/user"
	"memorize/internal/model"
	authenticationModel "memorize/internal/model/authentication"
	"memorize/internal/repository"
	"memorize/internal/service/authentication"
	userService "memorize/internal/service/authentication/user"
	"memorize/pkg/database"
	"memorize/pkg/security/jwt"
	"memorize/pkg/validator"

	_ "memorize/docs" // docs is generated by Swag CLI, you have to import it.

	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
	"go.uber.org/fx"
)

func NewRouter(userHandler *userHandler.UserHandler,
	authHandler *authHandler.AuthHandler,
) *gin.Engine {
	router := gin.Default()

	// User routes
	userRoutes := router.Group("/users")
	{
		userRoutes.GET("", userHandler.ListUsers)
		userRoutes.GET("/:id", userHandler.GetUserByID)
		userRoutes.POST("", userHandler.CreateUser)
		userRoutes.PUT("/:id", userHandler.UpdateUser)
		userRoutes.DELETE("/:id", userHandler.DeleteUser)
	}

	authRoutes := router.Group("/auth")
	{
		authRoutes.POST("/register", authHandler.RegisterUser)
		authRoutes.POST("/login", authHandler.LoginUser)
	}

	// Question routes
	// questionRoutes := router.Group("/questions")
	// {
	// 	questionRoutes.GET("", questionController.ListQuestions)
	// 	questionRoutes.GET("/:id", questionController.GetQuestionByID)
	// 	questionRoutes.POST("", questionController.CreateQuestion)
	// 	questionRoutes.PUT("/:id", questionController.UpdateQuestion)
	// 	questionRoutes.DELETE("/:id", questionController.DeleteQuestion)
	// }

	// router.POST("/auth/login", authController.Login)
	// auth := router.Group("/auth").Use(auth.AuthMiddleware)
	// {

	// }

	// Swagger endpoint with custom configuration
	router.GET("/swagger/*any",
		ginSwagger.WrapHandler(swaggerFiles.Handler,
			ginSwagger.DefaultModelsExpandDepth(-1),
			ginSwagger.DocExpansion("none")))

	return router
}

var Module = fx.Options(
	fx.Provide(
		config.NewConfig,
		NewRouter,
		jwt.NewJwt,

		model.NewListOfDbModels,
		database.NewDatabase,
		validator.NewValidator,

		repository.NewRepository[authenticationModel.User],
		userService.NewUserService,
		userHandler.NewUserHandler,

		authentication.NewAuthService,
		authHandler.NewAuthHandler,

		// repositories.NewRepository[models.Question],
		// questions.NewQuestionService,
		// controllers.NewQuestionController,
		// repositories.NewUserRepository,
		// auths.NewAuthService,
		// controllers.NewAuthController,
	),
	fx.Invoke(runGinServer),
)

func runGinServer(router *gin.Engine) {
	if err := router.Run(":8000"); err != nil {
		log.Fatal(err)
	}
}
